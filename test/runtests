#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019 Joyent, Inc.
#

#
# Run the triton-grafana tests.
# Run `./runtests -h` for usage info.
#

if [[ "$TRACE" != "" ]]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

set -o errexit
set -o pipefail

#---- guard

if [[ ! -f '/lib/sdc/.sdc-test-no-production-data' ]]; then
    cat <<EOF
To run this test you must create the file:

    /lib/sdc/.sdc-test-no-production-data

after ensuring you have no production data on this SDC.
EOF
    exit 2
fi

#---- config

NAME=triton-grafana
TOP=$(cd "$(dirname "${0}")/../"; pwd)

#---- support functions

function fatal() {
    echo "$(basename "${0}"): fatal error: ${*}"
    exit 1
}

function usage() {
    echo 'Usage:'
    echo '  runtests [OPTIONS...]'
    echo ''
    echo 'Options:'
    echo '  -f FILTER   Filter pattern (substring match) for test files to run.'
}

#---- mainline

start_time=$(date +%s)

# Options.
opt_test_pattern=
while getopts 'hf:' opt
do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        f)
            opt_test_pattern="${OPTARG}"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

OUTPUT_DIR="/var/tmp/${NAME}test"
echo "# Create output dir (${OUTPUT_DIR})."
rm -rf "${OUTPUT_DIR}"
mkdir -p "${OUTPUT_DIR}"

#---- start tests

NODE="${TOP}/build/node/bin/node"

test_files=$(ls -1 ${TOP}/test/*.test.js)
if [[ -n "${opt_test_pattern}" ]]; then
    test_files=$(echo "${test_files}" | grep "${opt_test_pattern}" || true)
    echo "# Running filtered set of test files: ${test_files}"
fi

for filename in ${test_files}; do
    f_no_ext=$(basename "${filename}" '.js')
    "${NODE}" "${filename}" | tee "${OUTPUT_DIR}/${f_no_ext}.tap" || true
done

#---- summary

start_time="$(date +%s)"
end_time="$(date +%s)"
elapsed="$((${end_time} - ${start_time}))"

# We require leading spaces in our search pattern to ensure that we limit our
# search to subtest results.
tests="$(grep -Eh "^ +1\.\.[0-9]" ${OUTPUT_DIR}/*.tap | \
    sed -E 's/^ +//g' | cut -d '.' -f3 | xargs | tr ' ' '+' | bc)" || true
failed="$(grep -Eh "^ +# failed [0-9]" ${OUTPUT_DIR}/*.tap | \
    sed -E 's/^ +//g' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)" || true
skipped="$(grep -Eh "^ +# skip: [0-9]" ${OUTPUT_DIR}/*.tap | \
    sed -E 's/^ +//g' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)" || true

# Filter out bunyan output, then grep for "function: " line, then get last
# word on the line, which is the function name.
failed_test_names="$(grep -Ehv '\{|\}' ${OUTPUT_DIR}/*.tap | \
    grep -E '^ +function' | rev | cut -d ' ' -f1 | rev)" || true

[[ -z "${tests}" ]] && tests=0
[[ -z "${failed}" ]] && failed=0
[[ -z "${skipped}" ]] && skipped=0

passed="$((${tests} - ${failed} - ${skipped}))"

if [[ -t 1 ]]; then
    # We're on a terminal, so use color
    COLOR_GREEN="\033[32m"
    COLOR_RED="\033[31m"
    COLOR_ORANGE="\033[33m"
    COLOR_NORMAL="\033[39m"
else
    # no terminal, no color
    COLOR_GREEN=
    COLOR_RED=
    COLOR_ORANGE=
    COLOR_NORMAL=
fi

# Output the summary
echo '#'
echo "# TESTS COMPLETE IN ${elapsed} SECONDS, SUMMARY:"
echo '#'
echo -e "#   ${COLOR_GREEN}PASS: ${passed} / ${tests}${COLOR_NORMAL}"
if [[ "${skipped}" -gt 0 ]]; then
    echo -e "#   ${COLOR_ORANGE}SKIP: ${skipped} / ${tests}${COLOR_NORMAL}"
fi
if [[ "${failed}" -gt 0 ]]; then
    echo -e "#   ${COLOR_RED}FAIL: ${failed} / ${tests}${COLOR_NORMAL}"
    echo '#'
    echo '# FAILED TESTS:'
    echo '#'
    for t in ${failed_test_names}; do
        echo "#   - ${t}"
    done
fi
echo '#'

if [[ "${failed}" -gt 0 ]]; then
    exit 1
fi

exit 0
